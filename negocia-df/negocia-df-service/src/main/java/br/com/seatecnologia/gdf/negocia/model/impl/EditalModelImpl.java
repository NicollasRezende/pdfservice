/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.Edital;
import br.com.seatecnologia.gdf.negocia.model.EditalModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Edital service. Represents a row in the &quot;GDF_Edital&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EditalModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EditalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EditalImpl
 * @generated
 */
@JSON(strict = true)
public class EditalModelImpl
	extends BaseModelImpl<Edital> implements EditalModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a edital model instance should use the <code>Edital</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_Edital";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"editalId", Types.BIGINT},
		{"titulo", Types.VARCHAR}, {"descricao", Types.VARCHAR},
		{"arquivo", Types.BIGINT}, {"dataInicio", Types.TIMESTAMP},
		{"dataFim", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("editalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("titulo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("descricao", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arquivo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dataInicio", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dataFim", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_Edital (uuid_ VARCHAR(75) null,editalId LONG not null primary key,titulo VARCHAR(255) null,descricao VARCHAR(255) null,arquivo LONG,dataInicio DATE null,dataFim DATE null)";

	public static final String TABLE_SQL_DROP = "drop table GDF_Edital";

	public static final String ORDER_BY_JPQL = " ORDER BY edital.editalId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_Edital.editalId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long EDITALID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EditalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _editalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEditalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _editalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Edital.class;
	}

	@Override
	public String getModelClassName() {
		return Edital.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Edital, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Edital, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Edital, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Edital)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Edital, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Edital, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Edital)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Edital, Object>> getAttributeGetterFunctions() {
		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Edital, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Edital, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Edital, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Edital, Object>>();

			attributeGetterFunctions.put("uuid", Edital::getUuid);
			attributeGetterFunctions.put("editalId", Edital::getEditalId);
			attributeGetterFunctions.put("titulo", Edital::getTitulo);
			attributeGetterFunctions.put("descricao", Edital::getDescricao);
			attributeGetterFunctions.put("arquivo", Edital::getArquivo);
			attributeGetterFunctions.put("dataInicio", Edital::getDataInicio);
			attributeGetterFunctions.put("dataFim", Edital::getDataFim);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Edital, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Edital, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Edital, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Edital, String>)Edital::setUuid);
			attributeSetterBiConsumers.put(
				"editalId", (BiConsumer<Edital, Long>)Edital::setEditalId);
			attributeSetterBiConsumers.put(
				"titulo", (BiConsumer<Edital, String>)Edital::setTitulo);
			attributeSetterBiConsumers.put(
				"descricao", (BiConsumer<Edital, String>)Edital::setDescricao);
			attributeSetterBiConsumers.put(
				"arquivo", (BiConsumer<Edital, Long>)Edital::setArquivo);
			attributeSetterBiConsumers.put(
				"dataInicio", (BiConsumer<Edital, Date>)Edital::setDataInicio);
			attributeSetterBiConsumers.put(
				"dataFim", (BiConsumer<Edital, Date>)Edital::setDataFim);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEditalId() {
		return _editalId;
	}

	@Override
	public void setEditalId(long editalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_editalId = editalId;
	}

	@JSON
	@Override
	public String getTitulo() {
		if (_titulo == null) {
			return "";
		}
		else {
			return _titulo;
		}
	}

	@Override
	public void setTitulo(String titulo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_titulo = titulo;
	}

	@JSON
	@Override
	public String getDescricao() {
		if (_descricao == null) {
			return "";
		}
		else {
			return _descricao;
		}
	}

	@Override
	public void setDescricao(String descricao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_descricao = descricao;
	}

	@JSON
	@Override
	public long getArquivo() {
		return _arquivo;
	}

	@Override
	public void setArquivo(long arquivo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_arquivo = arquivo;
	}

	@JSON
	@Override
	public Date getDataInicio() {
		return _dataInicio;
	}

	@Override
	public void setDataInicio(Date dataInicio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataInicio = dataInicio;
	}

	@JSON
	@Override
	public Date getDataFim() {
		return _dataFim;
	}

	@Override
	public void setDataFim(Date dataFim) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataFim = dataFim;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Edital.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Edital toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Edital>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EditalImpl editalImpl = new EditalImpl();

		editalImpl.setUuid(getUuid());
		editalImpl.setEditalId(getEditalId());
		editalImpl.setTitulo(getTitulo());
		editalImpl.setDescricao(getDescricao());
		editalImpl.setArquivo(getArquivo());
		editalImpl.setDataInicio(getDataInicio());
		editalImpl.setDataFim(getDataFim());

		editalImpl.resetOriginalValues();

		return editalImpl;
	}

	@Override
	public Edital cloneWithOriginalValues() {
		EditalImpl editalImpl = new EditalImpl();

		editalImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		editalImpl.setEditalId(this.<Long>getColumnOriginalValue("editalId"));
		editalImpl.setTitulo(this.<String>getColumnOriginalValue("titulo"));
		editalImpl.setDescricao(
			this.<String>getColumnOriginalValue("descricao"));
		editalImpl.setArquivo(this.<Long>getColumnOriginalValue("arquivo"));
		editalImpl.setDataInicio(
			this.<Date>getColumnOriginalValue("dataInicio"));
		editalImpl.setDataFim(this.<Date>getColumnOriginalValue("dataFim"));

		return editalImpl;
	}

	@Override
	public int compareTo(Edital edital) {
		long primaryKey = edital.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Edital)) {
			return false;
		}

		Edital edital = (Edital)object;

		long primaryKey = edital.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Edital> toCacheModel() {
		EditalCacheModel editalCacheModel = new EditalCacheModel();

		editalCacheModel.uuid = getUuid();

		String uuid = editalCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			editalCacheModel.uuid = null;
		}

		editalCacheModel.editalId = getEditalId();

		editalCacheModel.titulo = getTitulo();

		String titulo = editalCacheModel.titulo;

		if ((titulo != null) && (titulo.length() == 0)) {
			editalCacheModel.titulo = null;
		}

		editalCacheModel.descricao = getDescricao();

		String descricao = editalCacheModel.descricao;

		if ((descricao != null) && (descricao.length() == 0)) {
			editalCacheModel.descricao = null;
		}

		editalCacheModel.arquivo = getArquivo();

		Date dataInicio = getDataInicio();

		if (dataInicio != null) {
			editalCacheModel.dataInicio = dataInicio.getTime();
		}
		else {
			editalCacheModel.dataInicio = Long.MIN_VALUE;
		}

		Date dataFim = getDataFim();

		if (dataFim != null) {
			editalCacheModel.dataFim = dataFim.getTime();
		}
		else {
			editalCacheModel.dataFim = Long.MIN_VALUE;
		}

		return editalCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Edital, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Edital, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Edital, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Edital)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Edital>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Edital.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _editalId;
	private String _titulo;
	private String _descricao;
	private long _arquivo;
	private Date _dataInicio;
	private Date _dataFim;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Edital, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Edital)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("editalId", _editalId);
		_columnOriginalValues.put("titulo", _titulo);
		_columnOriginalValues.put("descricao", _descricao);
		_columnOriginalValues.put("arquivo", _arquivo);
		_columnOriginalValues.put("dataInicio", _dataInicio);
		_columnOriginalValues.put("dataFim", _dataFim);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("editalId", 2L);

		columnBitmasks.put("titulo", 4L);

		columnBitmasks.put("descricao", 8L);

		columnBitmasks.put("arquivo", 16L);

		columnBitmasks.put("dataInicio", 32L);

		columnBitmasks.put("dataFim", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Edital _escapedModel;

}