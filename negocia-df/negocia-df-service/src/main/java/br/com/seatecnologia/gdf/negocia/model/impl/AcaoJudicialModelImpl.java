/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.AcaoJudicial;
import br.com.seatecnologia.gdf.negocia.model.AcaoJudicialModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AcaoJudicial service. Represents a row in the &quot;GDF_AcaoJudicial&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AcaoJudicialModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AcaoJudicialImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AcaoJudicialImpl
 * @generated
 */
@JSON(strict = true)
public class AcaoJudicialModelImpl
	extends BaseModelImpl<AcaoJudicial> implements AcaoJudicialModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a acao judicial model instance should use the <code>AcaoJudicial</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_AcaoJudicial";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"acaoId", Types.BIGINT},
		{"orgaoTribunal", Types.VARCHAR}, {"numeroProcesso", Types.VARCHAR},
		{"unidadeVara", Types.VARCHAR}, {"parteAutora", Types.VARCHAR},
		{"parteRe", Types.VARCHAR}, {"observacoes", Types.VARCHAR},
		{"propostaId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("acaoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("orgaoTribunal", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numeroProcesso", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("unidadeVara", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parteAutora", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("parteRe", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("observacoes", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("propostaId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_AcaoJudicial (uuid_ VARCHAR(75) null,acaoId LONG not null primary key,orgaoTribunal VARCHAR(255) null,numeroProcesso VARCHAR(255) null,unidadeVara VARCHAR(255) null,parteAutora VARCHAR(255) null,parteRe VARCHAR(255) null,observacoes VARCHAR(1000) null,propostaId LONG)";

	public static final String TABLE_SQL_DROP = "drop table GDF_AcaoJudicial";

	public static final String ORDER_BY_JPQL =
		" ORDER BY acaoJudicial.acaoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_AcaoJudicial.acaoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROPOSTAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ACAOID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AcaoJudicialModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _acaoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAcaoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _acaoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AcaoJudicial.class;
	}

	@Override
	public String getModelClassName() {
		return AcaoJudicial.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AcaoJudicial, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AcaoJudicial, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcaoJudicial, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AcaoJudicial)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AcaoJudicial, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AcaoJudicial, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AcaoJudicial)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AcaoJudicial, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AcaoJudicial, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<AcaoJudicial, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<AcaoJudicial, Object>>
				attributeGetterFunctions =
					new LinkedHashMap<String, Function<AcaoJudicial, Object>>();

			attributeGetterFunctions.put("uuid", AcaoJudicial::getUuid);
			attributeGetterFunctions.put("acaoId", AcaoJudicial::getAcaoId);
			attributeGetterFunctions.put(
				"orgaoTribunal", AcaoJudicial::getOrgaoTribunal);
			attributeGetterFunctions.put(
				"numeroProcesso", AcaoJudicial::getNumeroProcesso);
			attributeGetterFunctions.put(
				"unidadeVara", AcaoJudicial::getUnidadeVara);
			attributeGetterFunctions.put(
				"parteAutora", AcaoJudicial::getParteAutora);
			attributeGetterFunctions.put("parteRe", AcaoJudicial::getParteRe);
			attributeGetterFunctions.put(
				"observacoes", AcaoJudicial::getObservacoes);
			attributeGetterFunctions.put(
				"propostaId", AcaoJudicial::getPropostaId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<AcaoJudicial, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<AcaoJudicial, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<AcaoJudicial, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<AcaoJudicial, String>)AcaoJudicial::setUuid);
			attributeSetterBiConsumers.put(
				"acaoId",
				(BiConsumer<AcaoJudicial, Long>)AcaoJudicial::setAcaoId);
			attributeSetterBiConsumers.put(
				"orgaoTribunal",
				(BiConsumer<AcaoJudicial, String>)
					AcaoJudicial::setOrgaoTribunal);
			attributeSetterBiConsumers.put(
				"numeroProcesso",
				(BiConsumer<AcaoJudicial, String>)
					AcaoJudicial::setNumeroProcesso);
			attributeSetterBiConsumers.put(
				"unidadeVara",
				(BiConsumer<AcaoJudicial, String>)AcaoJudicial::setUnidadeVara);
			attributeSetterBiConsumers.put(
				"parteAutora",
				(BiConsumer<AcaoJudicial, String>)AcaoJudicial::setParteAutora);
			attributeSetterBiConsumers.put(
				"parteRe",
				(BiConsumer<AcaoJudicial, String>)AcaoJudicial::setParteRe);
			attributeSetterBiConsumers.put(
				"observacoes",
				(BiConsumer<AcaoJudicial, String>)AcaoJudicial::setObservacoes);
			attributeSetterBiConsumers.put(
				"propostaId",
				(BiConsumer<AcaoJudicial, Long>)AcaoJudicial::setPropostaId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getAcaoId() {
		return _acaoId;
	}

	@Override
	public void setAcaoId(long acaoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acaoId = acaoId;
	}

	@JSON
	@Override
	public String getOrgaoTribunal() {
		if (_orgaoTribunal == null) {
			return "";
		}
		else {
			return _orgaoTribunal;
		}
	}

	@Override
	public void setOrgaoTribunal(String orgaoTribunal) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_orgaoTribunal = orgaoTribunal;
	}

	@JSON
	@Override
	public String getNumeroProcesso() {
		if (_numeroProcesso == null) {
			return "";
		}
		else {
			return _numeroProcesso;
		}
	}

	@Override
	public void setNumeroProcesso(String numeroProcesso) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numeroProcesso = numeroProcesso;
	}

	@JSON
	@Override
	public String getUnidadeVara() {
		if (_unidadeVara == null) {
			return "";
		}
		else {
			return _unidadeVara;
		}
	}

	@Override
	public void setUnidadeVara(String unidadeVara) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unidadeVara = unidadeVara;
	}

	@JSON
	@Override
	public String getParteAutora() {
		if (_parteAutora == null) {
			return "";
		}
		else {
			return _parteAutora;
		}
	}

	@Override
	public void setParteAutora(String parteAutora) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parteAutora = parteAutora;
	}

	@JSON
	@Override
	public String getParteRe() {
		if (_parteRe == null) {
			return "";
		}
		else {
			return _parteRe;
		}
	}

	@Override
	public void setParteRe(String parteRe) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_parteRe = parteRe;
	}

	@JSON
	@Override
	public String getObservacoes() {
		if (_observacoes == null) {
			return "";
		}
		else {
			return _observacoes;
		}
	}

	@Override
	public void setObservacoes(String observacoes) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_observacoes = observacoes;
	}

	@JSON
	@Override
	public long getPropostaId() {
		return _propostaId;
	}

	@Override
	public void setPropostaId(long propostaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propostaId = propostaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPropostaId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("propostaId"));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, AcaoJudicial.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AcaoJudicial toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AcaoJudicial>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AcaoJudicialImpl acaoJudicialImpl = new AcaoJudicialImpl();

		acaoJudicialImpl.setUuid(getUuid());
		acaoJudicialImpl.setAcaoId(getAcaoId());
		acaoJudicialImpl.setOrgaoTribunal(getOrgaoTribunal());
		acaoJudicialImpl.setNumeroProcesso(getNumeroProcesso());
		acaoJudicialImpl.setUnidadeVara(getUnidadeVara());
		acaoJudicialImpl.setParteAutora(getParteAutora());
		acaoJudicialImpl.setParteRe(getParteRe());
		acaoJudicialImpl.setObservacoes(getObservacoes());
		acaoJudicialImpl.setPropostaId(getPropostaId());

		acaoJudicialImpl.resetOriginalValues();

		return acaoJudicialImpl;
	}

	@Override
	public AcaoJudicial cloneWithOriginalValues() {
		AcaoJudicialImpl acaoJudicialImpl = new AcaoJudicialImpl();

		acaoJudicialImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		acaoJudicialImpl.setAcaoId(this.<Long>getColumnOriginalValue("acaoId"));
		acaoJudicialImpl.setOrgaoTribunal(
			this.<String>getColumnOriginalValue("orgaoTribunal"));
		acaoJudicialImpl.setNumeroProcesso(
			this.<String>getColumnOriginalValue("numeroProcesso"));
		acaoJudicialImpl.setUnidadeVara(
			this.<String>getColumnOriginalValue("unidadeVara"));
		acaoJudicialImpl.setParteAutora(
			this.<String>getColumnOriginalValue("parteAutora"));
		acaoJudicialImpl.setParteRe(
			this.<String>getColumnOriginalValue("parteRe"));
		acaoJudicialImpl.setObservacoes(
			this.<String>getColumnOriginalValue("observacoes"));
		acaoJudicialImpl.setPropostaId(
			this.<Long>getColumnOriginalValue("propostaId"));

		return acaoJudicialImpl;
	}

	@Override
	public int compareTo(AcaoJudicial acaoJudicial) {
		long primaryKey = acaoJudicial.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AcaoJudicial)) {
			return false;
		}

		AcaoJudicial acaoJudicial = (AcaoJudicial)object;

		long primaryKey = acaoJudicial.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AcaoJudicial> toCacheModel() {
		AcaoJudicialCacheModel acaoJudicialCacheModel =
			new AcaoJudicialCacheModel();

		acaoJudicialCacheModel.uuid = getUuid();

		String uuid = acaoJudicialCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			acaoJudicialCacheModel.uuid = null;
		}

		acaoJudicialCacheModel.acaoId = getAcaoId();

		acaoJudicialCacheModel.orgaoTribunal = getOrgaoTribunal();

		String orgaoTribunal = acaoJudicialCacheModel.orgaoTribunal;

		if ((orgaoTribunal != null) && (orgaoTribunal.length() == 0)) {
			acaoJudicialCacheModel.orgaoTribunal = null;
		}

		acaoJudicialCacheModel.numeroProcesso = getNumeroProcesso();

		String numeroProcesso = acaoJudicialCacheModel.numeroProcesso;

		if ((numeroProcesso != null) && (numeroProcesso.length() == 0)) {
			acaoJudicialCacheModel.numeroProcesso = null;
		}

		acaoJudicialCacheModel.unidadeVara = getUnidadeVara();

		String unidadeVara = acaoJudicialCacheModel.unidadeVara;

		if ((unidadeVara != null) && (unidadeVara.length() == 0)) {
			acaoJudicialCacheModel.unidadeVara = null;
		}

		acaoJudicialCacheModel.parteAutora = getParteAutora();

		String parteAutora = acaoJudicialCacheModel.parteAutora;

		if ((parteAutora != null) && (parteAutora.length() == 0)) {
			acaoJudicialCacheModel.parteAutora = null;
		}

		acaoJudicialCacheModel.parteRe = getParteRe();

		String parteRe = acaoJudicialCacheModel.parteRe;

		if ((parteRe != null) && (parteRe.length() == 0)) {
			acaoJudicialCacheModel.parteRe = null;
		}

		acaoJudicialCacheModel.observacoes = getObservacoes();

		String observacoes = acaoJudicialCacheModel.observacoes;

		if ((observacoes != null) && (observacoes.length() == 0)) {
			acaoJudicialCacheModel.observacoes = null;
		}

		acaoJudicialCacheModel.propostaId = getPropostaId();

		return acaoJudicialCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AcaoJudicial, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AcaoJudicial, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AcaoJudicial, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AcaoJudicial)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AcaoJudicial>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AcaoJudicial.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _acaoId;
	private String _orgaoTribunal;
	private String _numeroProcesso;
	private String _unidadeVara;
	private String _parteAutora;
	private String _parteRe;
	private String _observacoes;
	private long _propostaId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<AcaoJudicial, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AcaoJudicial)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("acaoId", _acaoId);
		_columnOriginalValues.put("orgaoTribunal", _orgaoTribunal);
		_columnOriginalValues.put("numeroProcesso", _numeroProcesso);
		_columnOriginalValues.put("unidadeVara", _unidadeVara);
		_columnOriginalValues.put("parteAutora", _parteAutora);
		_columnOriginalValues.put("parteRe", _parteRe);
		_columnOriginalValues.put("observacoes", _observacoes);
		_columnOriginalValues.put("propostaId", _propostaId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("acaoId", 2L);

		columnBitmasks.put("orgaoTribunal", 4L);

		columnBitmasks.put("numeroProcesso", 8L);

		columnBitmasks.put("unidadeVara", 16L);

		columnBitmasks.put("parteAutora", 32L);

		columnBitmasks.put("parteRe", 64L);

		columnBitmasks.put("observacoes", 128L);

		columnBitmasks.put("propostaId", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AcaoJudicial _escapedModel;

}