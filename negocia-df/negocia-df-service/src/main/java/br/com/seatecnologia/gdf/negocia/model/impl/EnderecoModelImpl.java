/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.Endereco;
import br.com.seatecnologia.gdf.negocia.model.EnderecoModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Endereco service. Represents a row in the &quot;GDF_Endereco&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>EnderecoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EnderecoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EnderecoImpl
 * @generated
 */
@JSON(strict = true)
public class EnderecoModelImpl
	extends BaseModelImpl<Endereco> implements EnderecoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a endereco model instance should use the <code>Endereco</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_Endereco";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"enderecoId", Types.BIGINT},
		{"cep", Types.VARCHAR}, {"endereco", Types.VARCHAR},
		{"numero", Types.VARCHAR}, {"estado", Types.VARCHAR},
		{"municipio", Types.VARCHAR}, {"bairro", Types.VARCHAR},
		{"complemento", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("enderecoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cep", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("endereco", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numero", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("estado", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("municipio", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bairro", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("complemento", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_Endereco (uuid_ VARCHAR(75) null,enderecoId LONG not null primary key,cep VARCHAR(255) null,endereco VARCHAR(255) null,numero VARCHAR(75) null,estado VARCHAR(255) null,municipio VARCHAR(255) null,bairro VARCHAR(255) null,complemento VARCHAR(255) null)";

	public static final String TABLE_SQL_DROP = "drop table GDF_Endereco";

	public static final String ORDER_BY_JPQL =
		" ORDER BY endereco.enderecoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_Endereco.enderecoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ENDERECOID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public EnderecoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _enderecoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEnderecoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _enderecoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Endereco.class;
	}

	@Override
	public String getModelClassName() {
		return Endereco.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Endereco, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Endereco, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Endereco, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Endereco)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Endereco, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Endereco, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Endereco)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Endereco, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Endereco, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Endereco, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Endereco, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Endereco, Object>>();

			attributeGetterFunctions.put("uuid", Endereco::getUuid);
			attributeGetterFunctions.put("enderecoId", Endereco::getEnderecoId);
			attributeGetterFunctions.put("cep", Endereco::getCep);
			attributeGetterFunctions.put("endereco", Endereco::getEndereco);
			attributeGetterFunctions.put("numero", Endereco::getNumero);
			attributeGetterFunctions.put("estado", Endereco::getEstado);
			attributeGetterFunctions.put("municipio", Endereco::getMunicipio);
			attributeGetterFunctions.put("bairro", Endereco::getBairro);
			attributeGetterFunctions.put(
				"complemento", Endereco::getComplemento);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Endereco, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Endereco, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Endereco, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Endereco, String>)Endereco::setUuid);
			attributeSetterBiConsumers.put(
				"enderecoId",
				(BiConsumer<Endereco, Long>)Endereco::setEnderecoId);
			attributeSetterBiConsumers.put(
				"cep", (BiConsumer<Endereco, String>)Endereco::setCep);
			attributeSetterBiConsumers.put(
				"endereco",
				(BiConsumer<Endereco, String>)Endereco::setEndereco);
			attributeSetterBiConsumers.put(
				"numero", (BiConsumer<Endereco, String>)Endereco::setNumero);
			attributeSetterBiConsumers.put(
				"estado", (BiConsumer<Endereco, String>)Endereco::setEstado);
			attributeSetterBiConsumers.put(
				"municipio",
				(BiConsumer<Endereco, String>)Endereco::setMunicipio);
			attributeSetterBiConsumers.put(
				"bairro", (BiConsumer<Endereco, String>)Endereco::setBairro);
			attributeSetterBiConsumers.put(
				"complemento",
				(BiConsumer<Endereco, String>)Endereco::setComplemento);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getEnderecoId() {
		return _enderecoId;
	}

	@Override
	public void setEnderecoId(long enderecoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_enderecoId = enderecoId;
	}

	@JSON
	@Override
	public String getCep() {
		if (_cep == null) {
			return "";
		}
		else {
			return _cep;
		}
	}

	@Override
	public void setCep(String cep) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cep = cep;
	}

	@JSON
	@Override
	public String getEndereco() {
		if (_endereco == null) {
			return "";
		}
		else {
			return _endereco;
		}
	}

	@Override
	public void setEndereco(String endereco) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_endereco = endereco;
	}

	@JSON
	@Override
	public String getNumero() {
		if (_numero == null) {
			return "";
		}
		else {
			return _numero;
		}
	}

	@Override
	public void setNumero(String numero) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numero = numero;
	}

	@JSON
	@Override
	public String getEstado() {
		if (_estado == null) {
			return "";
		}
		else {
			return _estado;
		}
	}

	@Override
	public void setEstado(String estado) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_estado = estado;
	}

	@JSON
	@Override
	public String getMunicipio() {
		if (_municipio == null) {
			return "";
		}
		else {
			return _municipio;
		}
	}

	@Override
	public void setMunicipio(String municipio) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_municipio = municipio;
	}

	@JSON
	@Override
	public String getBairro() {
		if (_bairro == null) {
			return "";
		}
		else {
			return _bairro;
		}
	}

	@Override
	public void setBairro(String bairro) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bairro = bairro;
	}

	@JSON
	@Override
	public String getComplemento() {
		if (_complemento == null) {
			return "";
		}
		else {
			return _complemento;
		}
	}

	@Override
	public void setComplemento(String complemento) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_complemento = complemento;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Endereco.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Endereco toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Endereco>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EnderecoImpl enderecoImpl = new EnderecoImpl();

		enderecoImpl.setUuid(getUuid());
		enderecoImpl.setEnderecoId(getEnderecoId());
		enderecoImpl.setCep(getCep());
		enderecoImpl.setEndereco(getEndereco());
		enderecoImpl.setNumero(getNumero());
		enderecoImpl.setEstado(getEstado());
		enderecoImpl.setMunicipio(getMunicipio());
		enderecoImpl.setBairro(getBairro());
		enderecoImpl.setComplemento(getComplemento());

		enderecoImpl.resetOriginalValues();

		return enderecoImpl;
	}

	@Override
	public Endereco cloneWithOriginalValues() {
		EnderecoImpl enderecoImpl = new EnderecoImpl();

		enderecoImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		enderecoImpl.setEnderecoId(
			this.<Long>getColumnOriginalValue("enderecoId"));
		enderecoImpl.setCep(this.<String>getColumnOriginalValue("cep"));
		enderecoImpl.setEndereco(
			this.<String>getColumnOriginalValue("endereco"));
		enderecoImpl.setNumero(this.<String>getColumnOriginalValue("numero"));
		enderecoImpl.setEstado(this.<String>getColumnOriginalValue("estado"));
		enderecoImpl.setMunicipio(
			this.<String>getColumnOriginalValue("municipio"));
		enderecoImpl.setBairro(this.<String>getColumnOriginalValue("bairro"));
		enderecoImpl.setComplemento(
			this.<String>getColumnOriginalValue("complemento"));

		return enderecoImpl;
	}

	@Override
	public int compareTo(Endereco endereco) {
		long primaryKey = endereco.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Endereco)) {
			return false;
		}

		Endereco endereco = (Endereco)object;

		long primaryKey = endereco.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Endereco> toCacheModel() {
		EnderecoCacheModel enderecoCacheModel = new EnderecoCacheModel();

		enderecoCacheModel.uuid = getUuid();

		String uuid = enderecoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			enderecoCacheModel.uuid = null;
		}

		enderecoCacheModel.enderecoId = getEnderecoId();

		enderecoCacheModel.cep = getCep();

		String cep = enderecoCacheModel.cep;

		if ((cep != null) && (cep.length() == 0)) {
			enderecoCacheModel.cep = null;
		}

		enderecoCacheModel.endereco = getEndereco();

		String endereco = enderecoCacheModel.endereco;

		if ((endereco != null) && (endereco.length() == 0)) {
			enderecoCacheModel.endereco = null;
		}

		enderecoCacheModel.numero = getNumero();

		String numero = enderecoCacheModel.numero;

		if ((numero != null) && (numero.length() == 0)) {
			enderecoCacheModel.numero = null;
		}

		enderecoCacheModel.estado = getEstado();

		String estado = enderecoCacheModel.estado;

		if ((estado != null) && (estado.length() == 0)) {
			enderecoCacheModel.estado = null;
		}

		enderecoCacheModel.municipio = getMunicipio();

		String municipio = enderecoCacheModel.municipio;

		if ((municipio != null) && (municipio.length() == 0)) {
			enderecoCacheModel.municipio = null;
		}

		enderecoCacheModel.bairro = getBairro();

		String bairro = enderecoCacheModel.bairro;

		if ((bairro != null) && (bairro.length() == 0)) {
			enderecoCacheModel.bairro = null;
		}

		enderecoCacheModel.complemento = getComplemento();

		String complemento = enderecoCacheModel.complemento;

		if ((complemento != null) && (complemento.length() == 0)) {
			enderecoCacheModel.complemento = null;
		}

		return enderecoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Endereco, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Endereco, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Endereco, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Endereco)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Endereco>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Endereco.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _enderecoId;
	private String _cep;
	private String _endereco;
	private String _numero;
	private String _estado;
	private String _municipio;
	private String _bairro;
	private String _complemento;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Endereco, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Endereco)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("enderecoId", _enderecoId);
		_columnOriginalValues.put("cep", _cep);
		_columnOriginalValues.put("endereco", _endereco);
		_columnOriginalValues.put("numero", _numero);
		_columnOriginalValues.put("estado", _estado);
		_columnOriginalValues.put("municipio", _municipio);
		_columnOriginalValues.put("bairro", _bairro);
		_columnOriginalValues.put("complemento", _complemento);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("enderecoId", 2L);

		columnBitmasks.put("cep", 4L);

		columnBitmasks.put("endereco", 8L);

		columnBitmasks.put("numero", 16L);

		columnBitmasks.put("estado", 32L);

		columnBitmasks.put("municipio", 64L);

		columnBitmasks.put("bairro", 128L);

		columnBitmasks.put("complemento", 256L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Endereco _escapedModel;

}