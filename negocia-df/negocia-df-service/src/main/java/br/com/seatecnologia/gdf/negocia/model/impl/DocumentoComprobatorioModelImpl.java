/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.DocumentoComprobatorio;
import br.com.seatecnologia.gdf.negocia.model.DocumentoComprobatorioModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DocumentoComprobatorio service. Represents a row in the &quot;GDF_DocumentoComprobatorio&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DocumentoComprobatorioModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentoComprobatorioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DocumentoComprobatorioImpl
 * @generated
 */
@JSON(strict = true)
public class DocumentoComprobatorioModelImpl
	extends BaseModelImpl<DocumentoComprobatorio>
	implements DocumentoComprobatorioModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a documento comprobatorio model instance should use the <code>DocumentoComprobatorio</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_DocumentoComprobatorio";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"documentoId", Types.BIGINT},
		{"fundamentacaoId", Types.BIGINT}, {"fileEntryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fundamentacaoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_DocumentoComprobatorio (uuid_ VARCHAR(75) null,documentoId LONG not null primary key,fundamentacaoId LONG,fileEntryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table GDF_DocumentoComprobatorio";

	public static final String ORDER_BY_JPQL =
		" ORDER BY documentoComprobatorio.documentoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_DocumentoComprobatorio.documentoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FUNDAMENTACAOID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DOCUMENTOID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DocumentoComprobatorioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _documentoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocumentoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _documentoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocumentoComprobatorio.class;
	}

	@Override
	public String getModelClassName() {
		return DocumentoComprobatorio.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DocumentoComprobatorio, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DocumentoComprobatorio, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocumentoComprobatorio, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DocumentoComprobatorio)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DocumentoComprobatorio, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DocumentoComprobatorio, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DocumentoComprobatorio)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DocumentoComprobatorio, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DocumentoComprobatorio, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<DocumentoComprobatorio, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<DocumentoComprobatorio, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<DocumentoComprobatorio, Object>>();

			attributeGetterFunctions.put(
				"uuid", DocumentoComprobatorio::getUuid);
			attributeGetterFunctions.put(
				"documentoId", DocumentoComprobatorio::getDocumentoId);
			attributeGetterFunctions.put(
				"fundamentacaoId", DocumentoComprobatorio::getFundamentacaoId);
			attributeGetterFunctions.put(
				"fileEntryId", DocumentoComprobatorio::getFileEntryId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<DocumentoComprobatorio, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<DocumentoComprobatorio, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<DocumentoComprobatorio, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<DocumentoComprobatorio, String>)
					DocumentoComprobatorio::setUuid);
			attributeSetterBiConsumers.put(
				"documentoId",
				(BiConsumer<DocumentoComprobatorio, Long>)
					DocumentoComprobatorio::setDocumentoId);
			attributeSetterBiConsumers.put(
				"fundamentacaoId",
				(BiConsumer<DocumentoComprobatorio, Long>)
					DocumentoComprobatorio::setFundamentacaoId);
			attributeSetterBiConsumers.put(
				"fileEntryId",
				(BiConsumer<DocumentoComprobatorio, Long>)
					DocumentoComprobatorio::setFileEntryId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDocumentoId() {
		return _documentoId;
	}

	@Override
	public void setDocumentoId(long documentoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_documentoId = documentoId;
	}

	@JSON
	@Override
	public long getFundamentacaoId() {
		return _fundamentacaoId;
	}

	@Override
	public void setFundamentacaoId(long fundamentacaoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fundamentacaoId = fundamentacaoId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFundamentacaoId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("fundamentacaoId"));
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileEntryId = fileEntryId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DocumentoComprobatorio.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocumentoComprobatorio toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DocumentoComprobatorio>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentoComprobatorioImpl documentoComprobatorioImpl =
			new DocumentoComprobatorioImpl();

		documentoComprobatorioImpl.setUuid(getUuid());
		documentoComprobatorioImpl.setDocumentoId(getDocumentoId());
		documentoComprobatorioImpl.setFundamentacaoId(getFundamentacaoId());
		documentoComprobatorioImpl.setFileEntryId(getFileEntryId());

		documentoComprobatorioImpl.resetOriginalValues();

		return documentoComprobatorioImpl;
	}

	@Override
	public DocumentoComprobatorio cloneWithOriginalValues() {
		DocumentoComprobatorioImpl documentoComprobatorioImpl =
			new DocumentoComprobatorioImpl();

		documentoComprobatorioImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		documentoComprobatorioImpl.setDocumentoId(
			this.<Long>getColumnOriginalValue("documentoId"));
		documentoComprobatorioImpl.setFundamentacaoId(
			this.<Long>getColumnOriginalValue("fundamentacaoId"));
		documentoComprobatorioImpl.setFileEntryId(
			this.<Long>getColumnOriginalValue("fileEntryId"));

		return documentoComprobatorioImpl;
	}

	@Override
	public int compareTo(DocumentoComprobatorio documentoComprobatorio) {
		long primaryKey = documentoComprobatorio.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DocumentoComprobatorio)) {
			return false;
		}

		DocumentoComprobatorio documentoComprobatorio =
			(DocumentoComprobatorio)object;

		long primaryKey = documentoComprobatorio.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DocumentoComprobatorio> toCacheModel() {
		DocumentoComprobatorioCacheModel documentoComprobatorioCacheModel =
			new DocumentoComprobatorioCacheModel();

		documentoComprobatorioCacheModel.uuid = getUuid();

		String uuid = documentoComprobatorioCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			documentoComprobatorioCacheModel.uuid = null;
		}

		documentoComprobatorioCacheModel.documentoId = getDocumentoId();

		documentoComprobatorioCacheModel.fundamentacaoId = getFundamentacaoId();

		documentoComprobatorioCacheModel.fileEntryId = getFileEntryId();

		return documentoComprobatorioCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DocumentoComprobatorio, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DocumentoComprobatorio, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DocumentoComprobatorio, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DocumentoComprobatorio)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DocumentoComprobatorio>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DocumentoComprobatorio.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _documentoId;
	private long _fundamentacaoId;
	private long _fileEntryId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DocumentoComprobatorio, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DocumentoComprobatorio)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("documentoId", _documentoId);
		_columnOriginalValues.put("fundamentacaoId", _fundamentacaoId);
		_columnOriginalValues.put("fileEntryId", _fileEntryId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("documentoId", 2L);

		columnBitmasks.put("fundamentacaoId", 4L);

		columnBitmasks.put("fileEntryId", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DocumentoComprobatorio _escapedModel;

}