/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.ComprovanteHonorario;
import br.com.seatecnologia.gdf.negocia.model.ComprovanteHonorarioModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the ComprovanteHonorario service. Represents a row in the &quot;GDF_ComprovanteHonorario&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ComprovanteHonorarioModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ComprovanteHonorarioImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ComprovanteHonorarioImpl
 * @generated
 */
@JSON(strict = true)
public class ComprovanteHonorarioModelImpl
	extends BaseModelImpl<ComprovanteHonorario>
	implements ComprovanteHonorarioModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a comprovante honorario model instance should use the <code>ComprovanteHonorario</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_ComprovanteHonorario";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"comprovanteId", Types.BIGINT},
		{"propostaId", Types.BIGINT}, {"valorPago", Types.DOUBLE},
		{"dataPagamento", Types.TIMESTAMP}, {"fileEntryId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comprovanteId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("propostaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("valorPago", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("dataPagamento", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_ComprovanteHonorario (uuid_ VARCHAR(75) null,comprovanteId LONG not null primary key,propostaId LONG,valorPago DOUBLE,dataPagamento DATE null,fileEntryId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table GDF_ComprovanteHonorario";

	public static final String ORDER_BY_JPQL =
		" ORDER BY comprovanteHonorario.comprovanteId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_ComprovanteHonorario.comprovanteId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROPOSTAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPROVANTEID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ComprovanteHonorarioModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _comprovanteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setComprovanteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _comprovanteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ComprovanteHonorario.class;
	}

	@Override
	public String getModelClassName() {
		return ComprovanteHonorario.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ComprovanteHonorario, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ComprovanteHonorario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ComprovanteHonorario, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ComprovanteHonorario)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ComprovanteHonorario, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ComprovanteHonorario, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ComprovanteHonorario)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ComprovanteHonorario, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ComprovanteHonorario, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<ComprovanteHonorario, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<ComprovanteHonorario, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<ComprovanteHonorario, Object>>();

			attributeGetterFunctions.put("uuid", ComprovanteHonorario::getUuid);
			attributeGetterFunctions.put(
				"comprovanteId", ComprovanteHonorario::getComprovanteId);
			attributeGetterFunctions.put(
				"propostaId", ComprovanteHonorario::getPropostaId);
			attributeGetterFunctions.put(
				"valorPago", ComprovanteHonorario::getValorPago);
			attributeGetterFunctions.put(
				"dataPagamento", ComprovanteHonorario::getDataPagamento);
			attributeGetterFunctions.put(
				"fileEntryId", ComprovanteHonorario::getFileEntryId);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<ComprovanteHonorario, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<ComprovanteHonorario, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<ComprovanteHonorario, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<ComprovanteHonorario, String>)
					ComprovanteHonorario::setUuid);
			attributeSetterBiConsumers.put(
				"comprovanteId",
				(BiConsumer<ComprovanteHonorario, Long>)
					ComprovanteHonorario::setComprovanteId);
			attributeSetterBiConsumers.put(
				"propostaId",
				(BiConsumer<ComprovanteHonorario, Long>)
					ComprovanteHonorario::setPropostaId);
			attributeSetterBiConsumers.put(
				"valorPago",
				(BiConsumer<ComprovanteHonorario, Double>)
					ComprovanteHonorario::setValorPago);
			attributeSetterBiConsumers.put(
				"dataPagamento",
				(BiConsumer<ComprovanteHonorario, Date>)
					ComprovanteHonorario::setDataPagamento);
			attributeSetterBiConsumers.put(
				"fileEntryId",
				(BiConsumer<ComprovanteHonorario, Long>)
					ComprovanteHonorario::setFileEntryId);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getComprovanteId() {
		return _comprovanteId;
	}

	@Override
	public void setComprovanteId(long comprovanteId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comprovanteId = comprovanteId;
	}

	@JSON
	@Override
	public long getPropostaId() {
		return _propostaId;
	}

	@Override
	public void setPropostaId(long propostaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propostaId = propostaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPropostaId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("propostaId"));
	}

	@JSON
	@Override
	public double getValorPago() {
		return _valorPago;
	}

	@Override
	public void setValorPago(double valorPago) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valorPago = valorPago;
	}

	@JSON
	@Override
	public Date getDataPagamento() {
		return _dataPagamento;
	}

	@Override
	public void setDataPagamento(Date dataPagamento) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataPagamento = dataPagamento;
	}

	@JSON
	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fileEntryId = fileEntryId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, ComprovanteHonorario.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ComprovanteHonorario toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ComprovanteHonorario>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ComprovanteHonorarioImpl comprovanteHonorarioImpl =
			new ComprovanteHonorarioImpl();

		comprovanteHonorarioImpl.setUuid(getUuid());
		comprovanteHonorarioImpl.setComprovanteId(getComprovanteId());
		comprovanteHonorarioImpl.setPropostaId(getPropostaId());
		comprovanteHonorarioImpl.setValorPago(getValorPago());
		comprovanteHonorarioImpl.setDataPagamento(getDataPagamento());
		comprovanteHonorarioImpl.setFileEntryId(getFileEntryId());

		comprovanteHonorarioImpl.resetOriginalValues();

		return comprovanteHonorarioImpl;
	}

	@Override
	public ComprovanteHonorario cloneWithOriginalValues() {
		ComprovanteHonorarioImpl comprovanteHonorarioImpl =
			new ComprovanteHonorarioImpl();

		comprovanteHonorarioImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		comprovanteHonorarioImpl.setComprovanteId(
			this.<Long>getColumnOriginalValue("comprovanteId"));
		comprovanteHonorarioImpl.setPropostaId(
			this.<Long>getColumnOriginalValue("propostaId"));
		comprovanteHonorarioImpl.setValorPago(
			this.<Double>getColumnOriginalValue("valorPago"));
		comprovanteHonorarioImpl.setDataPagamento(
			this.<Date>getColumnOriginalValue("dataPagamento"));
		comprovanteHonorarioImpl.setFileEntryId(
			this.<Long>getColumnOriginalValue("fileEntryId"));

		return comprovanteHonorarioImpl;
	}

	@Override
	public int compareTo(ComprovanteHonorario comprovanteHonorario) {
		long primaryKey = comprovanteHonorario.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof ComprovanteHonorario)) {
			return false;
		}

		ComprovanteHonorario comprovanteHonorario =
			(ComprovanteHonorario)object;

		long primaryKey = comprovanteHonorario.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<ComprovanteHonorario> toCacheModel() {
		ComprovanteHonorarioCacheModel comprovanteHonorarioCacheModel =
			new ComprovanteHonorarioCacheModel();

		comprovanteHonorarioCacheModel.uuid = getUuid();

		String uuid = comprovanteHonorarioCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			comprovanteHonorarioCacheModel.uuid = null;
		}

		comprovanteHonorarioCacheModel.comprovanteId = getComprovanteId();

		comprovanteHonorarioCacheModel.propostaId = getPropostaId();

		comprovanteHonorarioCacheModel.valorPago = getValorPago();

		Date dataPagamento = getDataPagamento();

		if (dataPagamento != null) {
			comprovanteHonorarioCacheModel.dataPagamento =
				dataPagamento.getTime();
		}
		else {
			comprovanteHonorarioCacheModel.dataPagamento = Long.MIN_VALUE;
		}

		comprovanteHonorarioCacheModel.fileEntryId = getFileEntryId();

		return comprovanteHonorarioCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<ComprovanteHonorario, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<ComprovanteHonorario, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ComprovanteHonorario, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(ComprovanteHonorario)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ComprovanteHonorario>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					ComprovanteHonorario.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _comprovanteId;
	private long _propostaId;
	private double _valorPago;
	private Date _dataPagamento;
	private long _fileEntryId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<ComprovanteHonorario, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((ComprovanteHonorario)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("comprovanteId", _comprovanteId);
		_columnOriginalValues.put("propostaId", _propostaId);
		_columnOriginalValues.put("valorPago", _valorPago);
		_columnOriginalValues.put("dataPagamento", _dataPagamento);
		_columnOriginalValues.put("fileEntryId", _fileEntryId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("comprovanteId", 2L);

		columnBitmasks.put("propostaId", 4L);

		columnBitmasks.put("valorPago", 8L);

		columnBitmasks.put("dataPagamento", 16L);

		columnBitmasks.put("fileEntryId", 32L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private ComprovanteHonorario _escapedModel;

}