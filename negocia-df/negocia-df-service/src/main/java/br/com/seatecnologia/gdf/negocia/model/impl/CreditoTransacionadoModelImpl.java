/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.CreditoTransacionado;
import br.com.seatecnologia.gdf.negocia.model.CreditoTransacionadoModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CreditoTransacionado service. Represents a row in the &quot;GDF_CreditoTransacionado&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CreditoTransacionadoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CreditoTransacionadoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CreditoTransacionadoImpl
 * @generated
 */
@JSON(strict = true)
public class CreditoTransacionadoModelImpl
	extends BaseModelImpl<CreditoTransacionado>
	implements CreditoTransacionadoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a credito transacionado model instance should use the <code>CreditoTransacionado</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_CreditoTransacionado";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"creditoId", Types.BIGINT},
		{"propostaId", Types.BIGINT}, {"numeroInscricao", Types.VARCHAR},
		{"codigoReceita", Types.VARCHAR}, {"dataInscricao", Types.TIMESTAMP},
		{"valorAtualizado", Types.DOUBLE}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("creditoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("propostaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("numeroInscricao", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codigoReceita", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dataInscricao", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("valorAtualizado", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_CreditoTransacionado (uuid_ VARCHAR(75) null,creditoId LONG not null primary key,propostaId LONG,numeroInscricao VARCHAR(255) null,codigoReceita VARCHAR(255) null,dataInscricao DATE null,valorAtualizado DOUBLE)";

	public static final String TABLE_SQL_DROP =
		"drop table GDF_CreditoTransacionado";

	public static final String ORDER_BY_JPQL =
		" ORDER BY creditoTransacionado.creditoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_CreditoTransacionado.creditoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long PROPOSTAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREDITOID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CreditoTransacionadoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _creditoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCreditoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _creditoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CreditoTransacionado.class;
	}

	@Override
	public String getModelClassName() {
		return CreditoTransacionado.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CreditoTransacionado, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CreditoTransacionado, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreditoTransacionado, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CreditoTransacionado)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CreditoTransacionado, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CreditoTransacionado, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CreditoTransacionado)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CreditoTransacionado, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CreditoTransacionado, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<CreditoTransacionado, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<CreditoTransacionado, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<CreditoTransacionado, Object>>();

			attributeGetterFunctions.put("uuid", CreditoTransacionado::getUuid);
			attributeGetterFunctions.put(
				"creditoId", CreditoTransacionado::getCreditoId);
			attributeGetterFunctions.put(
				"propostaId", CreditoTransacionado::getPropostaId);
			attributeGetterFunctions.put(
				"numeroInscricao", CreditoTransacionado::getNumeroInscricao);
			attributeGetterFunctions.put(
				"codigoReceita", CreditoTransacionado::getCodigoReceita);
			attributeGetterFunctions.put(
				"dataInscricao", CreditoTransacionado::getDataInscricao);
			attributeGetterFunctions.put(
				"valorAtualizado", CreditoTransacionado::getValorAtualizado);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<CreditoTransacionado, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<CreditoTransacionado, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<CreditoTransacionado, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<CreditoTransacionado, String>)
					CreditoTransacionado::setUuid);
			attributeSetterBiConsumers.put(
				"creditoId",
				(BiConsumer<CreditoTransacionado, Long>)
					CreditoTransacionado::setCreditoId);
			attributeSetterBiConsumers.put(
				"propostaId",
				(BiConsumer<CreditoTransacionado, Long>)
					CreditoTransacionado::setPropostaId);
			attributeSetterBiConsumers.put(
				"numeroInscricao",
				(BiConsumer<CreditoTransacionado, String>)
					CreditoTransacionado::setNumeroInscricao);
			attributeSetterBiConsumers.put(
				"codigoReceita",
				(BiConsumer<CreditoTransacionado, String>)
					CreditoTransacionado::setCodigoReceita);
			attributeSetterBiConsumers.put(
				"dataInscricao",
				(BiConsumer<CreditoTransacionado, Date>)
					CreditoTransacionado::setDataInscricao);
			attributeSetterBiConsumers.put(
				"valorAtualizado",
				(BiConsumer<CreditoTransacionado, Double>)
					CreditoTransacionado::setValorAtualizado);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getCreditoId() {
		return _creditoId;
	}

	@Override
	public void setCreditoId(long creditoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_creditoId = creditoId;
	}

	@JSON
	@Override
	public long getPropostaId() {
		return _propostaId;
	}

	@Override
	public void setPropostaId(long propostaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_propostaId = propostaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalPropostaId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("propostaId"));
	}

	@JSON
	@Override
	public String getNumeroInscricao() {
		if (_numeroInscricao == null) {
			return "";
		}
		else {
			return _numeroInscricao;
		}
	}

	@Override
	public void setNumeroInscricao(String numeroInscricao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_numeroInscricao = numeroInscricao;
	}

	@JSON
	@Override
	public String getCodigoReceita() {
		if (_codigoReceita == null) {
			return "";
		}
		else {
			return _codigoReceita;
		}
	}

	@Override
	public void setCodigoReceita(String codigoReceita) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_codigoReceita = codigoReceita;
	}

	@JSON
	@Override
	public Date getDataInscricao() {
		return _dataInscricao;
	}

	@Override
	public void setDataInscricao(Date dataInscricao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dataInscricao = dataInscricao;
	}

	@JSON
	@Override
	public double getValorAtualizado() {
		return _valorAtualizado;
	}

	@Override
	public void setValorAtualizado(double valorAtualizado) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_valorAtualizado = valorAtualizado;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CreditoTransacionado.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CreditoTransacionado toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CreditoTransacionado>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CreditoTransacionadoImpl creditoTransacionadoImpl =
			new CreditoTransacionadoImpl();

		creditoTransacionadoImpl.setUuid(getUuid());
		creditoTransacionadoImpl.setCreditoId(getCreditoId());
		creditoTransacionadoImpl.setPropostaId(getPropostaId());
		creditoTransacionadoImpl.setNumeroInscricao(getNumeroInscricao());
		creditoTransacionadoImpl.setCodigoReceita(getCodigoReceita());
		creditoTransacionadoImpl.setDataInscricao(getDataInscricao());
		creditoTransacionadoImpl.setValorAtualizado(getValorAtualizado());

		creditoTransacionadoImpl.resetOriginalValues();

		return creditoTransacionadoImpl;
	}

	@Override
	public CreditoTransacionado cloneWithOriginalValues() {
		CreditoTransacionadoImpl creditoTransacionadoImpl =
			new CreditoTransacionadoImpl();

		creditoTransacionadoImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		creditoTransacionadoImpl.setCreditoId(
			this.<Long>getColumnOriginalValue("creditoId"));
		creditoTransacionadoImpl.setPropostaId(
			this.<Long>getColumnOriginalValue("propostaId"));
		creditoTransacionadoImpl.setNumeroInscricao(
			this.<String>getColumnOriginalValue("numeroInscricao"));
		creditoTransacionadoImpl.setCodigoReceita(
			this.<String>getColumnOriginalValue("codigoReceita"));
		creditoTransacionadoImpl.setDataInscricao(
			this.<Date>getColumnOriginalValue("dataInscricao"));
		creditoTransacionadoImpl.setValorAtualizado(
			this.<Double>getColumnOriginalValue("valorAtualizado"));

		return creditoTransacionadoImpl;
	}

	@Override
	public int compareTo(CreditoTransacionado creditoTransacionado) {
		long primaryKey = creditoTransacionado.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof CreditoTransacionado)) {
			return false;
		}

		CreditoTransacionado creditoTransacionado =
			(CreditoTransacionado)object;

		long primaryKey = creditoTransacionado.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<CreditoTransacionado> toCacheModel() {
		CreditoTransacionadoCacheModel creditoTransacionadoCacheModel =
			new CreditoTransacionadoCacheModel();

		creditoTransacionadoCacheModel.uuid = getUuid();

		String uuid = creditoTransacionadoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			creditoTransacionadoCacheModel.uuid = null;
		}

		creditoTransacionadoCacheModel.creditoId = getCreditoId();

		creditoTransacionadoCacheModel.propostaId = getPropostaId();

		creditoTransacionadoCacheModel.numeroInscricao = getNumeroInscricao();

		String numeroInscricao = creditoTransacionadoCacheModel.numeroInscricao;

		if ((numeroInscricao != null) && (numeroInscricao.length() == 0)) {
			creditoTransacionadoCacheModel.numeroInscricao = null;
		}

		creditoTransacionadoCacheModel.codigoReceita = getCodigoReceita();

		String codigoReceita = creditoTransacionadoCacheModel.codigoReceita;

		if ((codigoReceita != null) && (codigoReceita.length() == 0)) {
			creditoTransacionadoCacheModel.codigoReceita = null;
		}

		Date dataInscricao = getDataInscricao();

		if (dataInscricao != null) {
			creditoTransacionadoCacheModel.dataInscricao =
				dataInscricao.getTime();
		}
		else {
			creditoTransacionadoCacheModel.dataInscricao = Long.MIN_VALUE;
		}

		creditoTransacionadoCacheModel.valorAtualizado = getValorAtualizado();

		return creditoTransacionadoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CreditoTransacionado, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CreditoTransacionado, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CreditoTransacionado, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(CreditoTransacionado)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CreditoTransacionado>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					CreditoTransacionado.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _creditoId;
	private long _propostaId;
	private String _numeroInscricao;
	private String _codigoReceita;
	private Date _dataInscricao;
	private double _valorAtualizado;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<CreditoTransacionado, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((CreditoTransacionado)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("creditoId", _creditoId);
		_columnOriginalValues.put("propostaId", _propostaId);
		_columnOriginalValues.put("numeroInscricao", _numeroInscricao);
		_columnOriginalValues.put("codigoReceita", _codigoReceita);
		_columnOriginalValues.put("dataInscricao", _dataInscricao);
		_columnOriginalValues.put("valorAtualizado", _valorAtualizado);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("creditoId", 2L);

		columnBitmasks.put("propostaId", 4L);

		columnBitmasks.put("numeroInscricao", 8L);

		columnBitmasks.put("codigoReceita", 16L);

		columnBitmasks.put("dataInscricao", 32L);

		columnBitmasks.put("valorAtualizado", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private CreditoTransacionado _escapedModel;

}