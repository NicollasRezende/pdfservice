/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.DemonstracaoDocumentos;
import br.com.seatecnologia.gdf.negocia.model.DemonstracaoDocumentosModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DemonstracaoDocumentos service. Represents a row in the &quot;GDF_DemonstracaoDocumentos&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DemonstracaoDocumentosModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DemonstracaoDocumentosImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DemonstracaoDocumentosImpl
 * @generated
 */
@JSON(strict = true)
public class DemonstracaoDocumentosModelImpl
	extends BaseModelImpl<DemonstracaoDocumentos>
	implements DemonstracaoDocumentosModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a demonstracao documentos model instance should use the <code>DemonstracaoDocumentos</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_DemonstracaoDocumentos";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"demonstracaoDocumentosId", Types.BIGINT},
		{"demonstracaoId", Types.BIGINT}, {"tipoDocumento", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("demonstracaoDocumentosId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("demonstracaoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tipoDocumento", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_DemonstracaoDocumentos (uuid_ VARCHAR(75) null,demonstracaoDocumentosId LONG not null primary key,demonstracaoId LONG,tipoDocumento INTEGER)";

	public static final String TABLE_SQL_DROP =
		"drop table GDF_DemonstracaoDocumentos";

	public static final String ORDER_BY_JPQL =
		" ORDER BY demonstracaoDocumentos.demonstracaoDocumentosId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_DemonstracaoDocumentos.demonstracaoDocumentosId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEMONSTRACAOID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEMONSTRACAODOCUMENTOSID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DemonstracaoDocumentosModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _demonstracaoDocumentosId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDemonstracaoDocumentosId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _demonstracaoDocumentosId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DemonstracaoDocumentos.class;
	}

	@Override
	public String getModelClassName() {
		return DemonstracaoDocumentos.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DemonstracaoDocumentos, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DemonstracaoDocumentos, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DemonstracaoDocumentos, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DemonstracaoDocumentos)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DemonstracaoDocumentos, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DemonstracaoDocumentos, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DemonstracaoDocumentos)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DemonstracaoDocumentos, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DemonstracaoDocumentos, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map
			<String, Function<DemonstracaoDocumentos, Object>>
				_attributeGetterFunctions;

		static {
			Map<String, Function<DemonstracaoDocumentos, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<DemonstracaoDocumentos, Object>>();

			attributeGetterFunctions.put(
				"uuid", DemonstracaoDocumentos::getUuid);
			attributeGetterFunctions.put(
				"demonstracaoDocumentosId",
				DemonstracaoDocumentos::getDemonstracaoDocumentosId);
			attributeGetterFunctions.put(
				"demonstracaoId", DemonstracaoDocumentos::getDemonstracaoId);
			attributeGetterFunctions.put(
				"tipoDocumento", DemonstracaoDocumentos::getTipoDocumento);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map
			<String, BiConsumer<DemonstracaoDocumentos, Object>>
				_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<DemonstracaoDocumentos, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap
						<String, BiConsumer<DemonstracaoDocumentos, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<DemonstracaoDocumentos, String>)
					DemonstracaoDocumentos::setUuid);
			attributeSetterBiConsumers.put(
				"demonstracaoDocumentosId",
				(BiConsumer<DemonstracaoDocumentos, Long>)
					DemonstracaoDocumentos::setDemonstracaoDocumentosId);
			attributeSetterBiConsumers.put(
				"demonstracaoId",
				(BiConsumer<DemonstracaoDocumentos, Long>)
					DemonstracaoDocumentos::setDemonstracaoId);
			attributeSetterBiConsumers.put(
				"tipoDocumento",
				(BiConsumer<DemonstracaoDocumentos, Integer>)
					DemonstracaoDocumentos::setTipoDocumento);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDemonstracaoDocumentosId() {
		return _demonstracaoDocumentosId;
	}

	@Override
	public void setDemonstracaoDocumentosId(long demonstracaoDocumentosId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_demonstracaoDocumentosId = demonstracaoDocumentosId;
	}

	@JSON
	@Override
	public long getDemonstracaoId() {
		return _demonstracaoId;
	}

	@Override
	public void setDemonstracaoId(long demonstracaoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_demonstracaoId = demonstracaoId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalDemonstracaoId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("demonstracaoId"));
	}

	@JSON
	@Override
	public int getTipoDocumento() {
		return _tipoDocumento;
	}

	@Override
	public void setTipoDocumento(int tipoDocumento) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tipoDocumento = tipoDocumento;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DemonstracaoDocumentos.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DemonstracaoDocumentos toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DemonstracaoDocumentos>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DemonstracaoDocumentosImpl demonstracaoDocumentosImpl =
			new DemonstracaoDocumentosImpl();

		demonstracaoDocumentosImpl.setUuid(getUuid());
		demonstracaoDocumentosImpl.setDemonstracaoDocumentosId(
			getDemonstracaoDocumentosId());
		demonstracaoDocumentosImpl.setDemonstracaoId(getDemonstracaoId());
		demonstracaoDocumentosImpl.setTipoDocumento(getTipoDocumento());

		demonstracaoDocumentosImpl.resetOriginalValues();

		return demonstracaoDocumentosImpl;
	}

	@Override
	public DemonstracaoDocumentos cloneWithOriginalValues() {
		DemonstracaoDocumentosImpl demonstracaoDocumentosImpl =
			new DemonstracaoDocumentosImpl();

		demonstracaoDocumentosImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		demonstracaoDocumentosImpl.setDemonstracaoDocumentosId(
			this.<Long>getColumnOriginalValue("demonstracaoDocumentosId"));
		demonstracaoDocumentosImpl.setDemonstracaoId(
			this.<Long>getColumnOriginalValue("demonstracaoId"));
		demonstracaoDocumentosImpl.setTipoDocumento(
			this.<Integer>getColumnOriginalValue("tipoDocumento"));

		return demonstracaoDocumentosImpl;
	}

	@Override
	public int compareTo(DemonstracaoDocumentos demonstracaoDocumentos) {
		long primaryKey = demonstracaoDocumentos.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DemonstracaoDocumentos)) {
			return false;
		}

		DemonstracaoDocumentos demonstracaoDocumentos =
			(DemonstracaoDocumentos)object;

		long primaryKey = demonstracaoDocumentos.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DemonstracaoDocumentos> toCacheModel() {
		DemonstracaoDocumentosCacheModel demonstracaoDocumentosCacheModel =
			new DemonstracaoDocumentosCacheModel();

		demonstracaoDocumentosCacheModel.uuid = getUuid();

		String uuid = demonstracaoDocumentosCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			demonstracaoDocumentosCacheModel.uuid = null;
		}

		demonstracaoDocumentosCacheModel.demonstracaoDocumentosId =
			getDemonstracaoDocumentosId();

		demonstracaoDocumentosCacheModel.demonstracaoId = getDemonstracaoId();

		demonstracaoDocumentosCacheModel.tipoDocumento = getTipoDocumento();

		return demonstracaoDocumentosCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DemonstracaoDocumentos, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DemonstracaoDocumentos, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DemonstracaoDocumentos, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(DemonstracaoDocumentos)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DemonstracaoDocumentos>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DemonstracaoDocumentos.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _demonstracaoDocumentosId;
	private long _demonstracaoId;
	private int _tipoDocumento;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DemonstracaoDocumentos, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DemonstracaoDocumentos)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"demonstracaoDocumentosId", _demonstracaoDocumentosId);
		_columnOriginalValues.put("demonstracaoId", _demonstracaoId);
		_columnOriginalValues.put("tipoDocumento", _tipoDocumento);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("demonstracaoDocumentosId", 2L);

		columnBitmasks.put("demonstracaoId", 4L);

		columnBitmasks.put("tipoDocumento", 8L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DemonstracaoDocumentos _escapedModel;

}