/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.service.base;

import br.com.seatecnologia.gdf.negocia.model.DocumentoComprobatorio;
import br.com.seatecnologia.gdf.negocia.service.DocumentoComprobatorioLocalService;
import br.com.seatecnologia.gdf.negocia.service.persistence.AcaoJudicialPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.AcaoJudicialPropostaPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.AdministradorJudicialPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.AdvogadoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.AnexosOutrosPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.BemDireitoAdicionalPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.BensDireitosLaudoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.BensDireitosRequerentePersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.ComprovanteHonorarioPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.ConcessaoDfPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.CreditoTransacionadoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.CredorPropostaPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.DadosRegistroPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.DeclaracaoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.DemaisPartesPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.DemonstracaoContabilPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.DocumentoComprobatorioPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.EditalPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.EncargoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.EnderecoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.FundamentacaoPedidoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.GarantiaPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.GarantiaPropostaPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.IdentificacaoDebitosPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.ParcelamentoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.ProcuracaoPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.PropostaPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.QualificacaoCompletaPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.RelacaoCredorPersistence;
import br.com.seatecnologia.gdf.negocia.service.persistence.TermoAssinadoPersistence;

import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.CurrentConnectionUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;

import java.io.Serializable;

import java.sql.Connection;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the documento comprobatorio local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link br.com.seatecnologia.gdf.negocia.service.impl.DocumentoComprobatorioLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see br.com.seatecnologia.gdf.negocia.service.impl.DocumentoComprobatorioLocalServiceImpl
 * @generated
 */
public abstract class DocumentoComprobatorioLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AopService, DocumentoComprobatorioLocalService,
			   IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>DocumentoComprobatorioLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>br.com.seatecnologia.gdf.negocia.service.DocumentoComprobatorioLocalServiceUtil</code>.
	 */

	/**
	 * Adds the documento comprobatorio to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect DocumentoComprobatorioLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param documentoComprobatorio the documento comprobatorio
	 * @return the documento comprobatorio that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DocumentoComprobatorio addDocumentoComprobatorio(
		DocumentoComprobatorio documentoComprobatorio) {

		documentoComprobatorio.setNew(true);

		return documentoComprobatorioPersistence.update(documentoComprobatorio);
	}

	/**
	 * Creates a new documento comprobatorio with the primary key. Does not add the documento comprobatorio to the database.
	 *
	 * @param documentoId the primary key for the new documento comprobatorio
	 * @return the new documento comprobatorio
	 */
	@Override
	@Transactional(enabled = false)
	public DocumentoComprobatorio createDocumentoComprobatorio(
		long documentoId) {

		return documentoComprobatorioPersistence.create(documentoId);
	}

	/**
	 * Deletes the documento comprobatorio with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect DocumentoComprobatorioLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param documentoId the primary key of the documento comprobatorio
	 * @return the documento comprobatorio that was removed
	 * @throws PortalException if a documento comprobatorio with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DocumentoComprobatorio deleteDocumentoComprobatorio(long documentoId)
		throws PortalException {

		return documentoComprobatorioPersistence.remove(documentoId);
	}

	/**
	 * Deletes the documento comprobatorio from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect DocumentoComprobatorioLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param documentoComprobatorio the documento comprobatorio
	 * @return the documento comprobatorio that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public DocumentoComprobatorio deleteDocumentoComprobatorio(
		DocumentoComprobatorio documentoComprobatorio) {

		return documentoComprobatorioPersistence.remove(documentoComprobatorio);
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return documentoComprobatorioPersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			DocumentoComprobatorio.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return documentoComprobatorioPersistence.findWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>br.com.seatecnologia.gdf.negocia.model.impl.DocumentoComprobatorioModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return documentoComprobatorioPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>br.com.seatecnologia.gdf.negocia.model.impl.DocumentoComprobatorioModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return documentoComprobatorioPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return documentoComprobatorioPersistence.countWithDynamicQuery(
			dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return documentoComprobatorioPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public DocumentoComprobatorio fetchDocumentoComprobatorio(
		long documentoId) {

		return documentoComprobatorioPersistence.fetchByPrimaryKey(documentoId);
	}

	/**
	 * Returns the documento comprobatorio with the primary key.
	 *
	 * @param documentoId the primary key of the documento comprobatorio
	 * @return the documento comprobatorio
	 * @throws PortalException if a documento comprobatorio with the primary key could not be found
	 */
	@Override
	public DocumentoComprobatorio getDocumentoComprobatorio(long documentoId)
		throws PortalException {

		return documentoComprobatorioPersistence.findByPrimaryKey(documentoId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(
			documentoComprobatorioLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DocumentoComprobatorio.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("documentoId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			documentoComprobatorioLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(
			DocumentoComprobatorio.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"documentoId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(
			documentoComprobatorioLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(DocumentoComprobatorio.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("documentoId");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return documentoComprobatorioPersistence.create(
			((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		if (_log.isWarnEnabled()) {
			_log.warn(
				"Implement DocumentoComprobatorioLocalServiceImpl#deleteDocumentoComprobatorio(DocumentoComprobatorio) to avoid orphaned data");
		}

		return documentoComprobatorioLocalService.deleteDocumentoComprobatorio(
			(DocumentoComprobatorio)persistedModel);
	}

	@Override
	public BasePersistence<DocumentoComprobatorio> getBasePersistence() {
		return documentoComprobatorioPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return documentoComprobatorioPersistence.findByPrimaryKey(
			primaryKeyObj);
	}

	/**
	 * Returns a range of all the documento comprobatorios.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>br.com.seatecnologia.gdf.negocia.model.impl.DocumentoComprobatorioModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of documento comprobatorios
	 * @param end the upper bound of the range of documento comprobatorios (not inclusive)
	 * @return the range of documento comprobatorios
	 */
	@Override
	public List<DocumentoComprobatorio> getDocumentoComprobatorios(
		int start, int end) {

		return documentoComprobatorioPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of documento comprobatorios.
	 *
	 * @return the number of documento comprobatorios
	 */
	@Override
	public int getDocumentoComprobatoriosCount() {
		return documentoComprobatorioPersistence.countAll();
	}

	/**
	 * Updates the documento comprobatorio in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect DocumentoComprobatorioLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param documentoComprobatorio the documento comprobatorio
	 * @return the documento comprobatorio that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public DocumentoComprobatorio updateDocumentoComprobatorio(
		DocumentoComprobatorio documentoComprobatorio) {

		return documentoComprobatorioPersistence.update(documentoComprobatorio);
	}

	@Deactivate
	protected void deactivate() {
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			DocumentoComprobatorioLocalService.class,
			IdentifiableOSGiService.class, PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		documentoComprobatorioLocalService =
			(DocumentoComprobatorioLocalService)aopProxy;
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return DocumentoComprobatorioLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return DocumentoComprobatorio.class;
	}

	protected String getModelClassName() {
		return DocumentoComprobatorio.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		DataSource dataSource =
			documentoComprobatorioPersistence.getDataSource();

		DB db = DBManagerUtil.getDB();

		Connection currentConnection = CurrentConnectionUtil.getConnection(
			dataSource);

		try {
			if (currentConnection != null) {
				db.runSQL(currentConnection, new String[] {sql});

				return;
			}

			try (Connection connection = dataSource.getConnection()) {
				db.runSQL(connection, new String[] {sql});
			}
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	@Reference
	protected AcaoJudicialPersistence acaoJudicialPersistence;

	@Reference
	protected AcaoJudicialPropostaPersistence acaoJudicialPropostaPersistence;

	@Reference
	protected AdministradorJudicialPersistence administradorJudicialPersistence;

	@Reference
	protected AdvogadoPersistence advogadoPersistence;

	@Reference
	protected AnexosOutrosPersistence anexosOutrosPersistence;

	@Reference
	protected BemDireitoAdicionalPersistence bemDireitoAdicionalPersistence;

	@Reference
	protected BensDireitosLaudoPersistence bensDireitosLaudoPersistence;

	@Reference
	protected BensDireitosRequerentePersistence
		bensDireitosRequerentePersistence;

	@Reference
	protected ComprovanteHonorarioPersistence comprovanteHonorarioPersistence;

	@Reference
	protected ConcessaoDfPersistence concessaoDfPersistence;

	@Reference
	protected CreditoTransacionadoPersistence creditoTransacionadoPersistence;

	@Reference
	protected CredorPropostaPersistence credorPropostaPersistence;

	@Reference
	protected DadosRegistroPersistence dadosRegistroPersistence;

	@Reference
	protected DeclaracaoPersistence declaracaoPersistence;

	@Reference
	protected DemaisPartesPersistence demaisPartesPersistence;

	@Reference
	protected DemonstracaoContabilPersistence demonstracaoContabilPersistence;

	protected DocumentoComprobatorioLocalService
		documentoComprobatorioLocalService;

	@Reference
	protected DocumentoComprobatorioPersistence
		documentoComprobatorioPersistence;

	@Reference
	protected EditalPersistence editalPersistence;

	@Reference
	protected EncargoPersistence encargoPersistence;

	@Reference
	protected EnderecoPersistence enderecoPersistence;

	@Reference
	protected FundamentacaoPedidoPersistence fundamentacaoPedidoPersistence;

	@Reference
	protected GarantiaPersistence garantiaPersistence;

	@Reference
	protected GarantiaPropostaPersistence garantiaPropostaPersistence;

	@Reference
	protected IdentificacaoDebitosPersistence identificacaoDebitosPersistence;

	@Reference
	protected ParcelamentoPersistence parcelamentoPersistence;

	@Reference
	protected ProcuracaoPersistence procuracaoPersistence;

	@Reference
	protected PropostaPersistence propostaPersistence;

	@Reference
	protected QualificacaoCompletaPersistence qualificacaoCompletaPersistence;

	@Reference
	protected RelacaoCredorPersistence relacaoCredorPersistence;

	@Reference
	protected TermoAssinadoPersistence termoAssinadoPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

	private static final Log _log = LogFactoryUtil.getLog(
		DocumentoComprobatorioLocalServiceBaseImpl.class);

}