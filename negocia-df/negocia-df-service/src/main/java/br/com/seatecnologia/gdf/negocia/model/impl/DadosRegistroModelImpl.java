/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package br.com.seatecnologia.gdf.negocia.model.impl;

import br.com.seatecnologia.gdf.negocia.model.DadosRegistro;
import br.com.seatecnologia.gdf.negocia.model.DadosRegistroModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DadosRegistro service. Represents a row in the &quot;GDF_DadosRegistro&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DadosRegistroModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DadosRegistroImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DadosRegistroImpl
 * @generated
 */
@JSON(strict = true)
public class DadosRegistroModelImpl
	extends BaseModelImpl<DadosRegistro> implements DadosRegistroModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dados registro model instance should use the <code>DadosRegistro</code> interface instead.
	 */
	public static final String TABLE_NAME = "GDF_DadosRegistro";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"dadosRegistroId", Types.BIGINT},
		{"garantiaId", Types.BIGINT}, {"matriculaImovel", Types.VARCHAR},
		{"cartorioRegistro", Types.VARCHAR}, {"renavam", Types.VARCHAR},
		{"localizacao", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dadosRegistroId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("garantiaId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("matriculaImovel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cartorioRegistro", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("renavam", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("localizacao", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table GDF_DadosRegistro (uuid_ VARCHAR(75) null,dadosRegistroId LONG not null primary key,garantiaId LONG,matriculaImovel VARCHAR(255) null,cartorioRegistro VARCHAR(255) null,renavam VARCHAR(255) null,localizacao VARCHAR(255) null)";

	public static final String TABLE_SQL_DROP = "drop table GDF_DadosRegistro";

	public static final String ORDER_BY_JPQL =
		" ORDER BY dadosRegistro.dadosRegistroId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY GDF_DadosRegistro.dadosRegistroId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GARANTIAID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DADOSREGISTROID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DadosRegistroModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dadosRegistroId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDadosRegistroId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dadosRegistroId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DadosRegistro.class;
	}

	@Override
	public String getModelClassName() {
		return DadosRegistro.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DadosRegistro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DadosRegistro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DadosRegistro, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DadosRegistro)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DadosRegistro, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DadosRegistro, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DadosRegistro)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DadosRegistro, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DadosRegistro, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<DadosRegistro, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<DadosRegistro, Object>>
				attributeGetterFunctions =
					new LinkedHashMap
						<String, Function<DadosRegistro, Object>>();

			attributeGetterFunctions.put("uuid", DadosRegistro::getUuid);
			attributeGetterFunctions.put(
				"dadosRegistroId", DadosRegistro::getDadosRegistroId);
			attributeGetterFunctions.put(
				"garantiaId", DadosRegistro::getGarantiaId);
			attributeGetterFunctions.put(
				"matriculaImovel", DadosRegistro::getMatriculaImovel);
			attributeGetterFunctions.put(
				"cartorioRegistro", DadosRegistro::getCartorioRegistro);
			attributeGetterFunctions.put("renavam", DadosRegistro::getRenavam);
			attributeGetterFunctions.put(
				"localizacao", DadosRegistro::getLocalizacao);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<DadosRegistro, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<DadosRegistro, ?>>
				attributeSetterBiConsumers =
					new LinkedHashMap<String, BiConsumer<DadosRegistro, ?>>();

			attributeSetterBiConsumers.put(
				"uuid",
				(BiConsumer<DadosRegistro, String>)DadosRegistro::setUuid);
			attributeSetterBiConsumers.put(
				"dadosRegistroId",
				(BiConsumer<DadosRegistro, Long>)
					DadosRegistro::setDadosRegistroId);
			attributeSetterBiConsumers.put(
				"garantiaId",
				(BiConsumer<DadosRegistro, Long>)DadosRegistro::setGarantiaId);
			attributeSetterBiConsumers.put(
				"matriculaImovel",
				(BiConsumer<DadosRegistro, String>)
					DadosRegistro::setMatriculaImovel);
			attributeSetterBiConsumers.put(
				"cartorioRegistro",
				(BiConsumer<DadosRegistro, String>)
					DadosRegistro::setCartorioRegistro);
			attributeSetterBiConsumers.put(
				"renavam",
				(BiConsumer<DadosRegistro, String>)DadosRegistro::setRenavam);
			attributeSetterBiConsumers.put(
				"localizacao",
				(BiConsumer<DadosRegistro, String>)
					DadosRegistro::setLocalizacao);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDadosRegistroId() {
		return _dadosRegistroId;
	}

	@Override
	public void setDadosRegistroId(long dadosRegistroId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dadosRegistroId = dadosRegistroId;
	}

	@JSON
	@Override
	public long getGarantiaId() {
		return _garantiaId;
	}

	@Override
	public void setGarantiaId(long garantiaId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_garantiaId = garantiaId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGarantiaId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("garantiaId"));
	}

	@JSON
	@Override
	public String getMatriculaImovel() {
		if (_matriculaImovel == null) {
			return "";
		}
		else {
			return _matriculaImovel;
		}
	}

	@Override
	public void setMatriculaImovel(String matriculaImovel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_matriculaImovel = matriculaImovel;
	}

	@JSON
	@Override
	public String getCartorioRegistro() {
		if (_cartorioRegistro == null) {
			return "";
		}
		else {
			return _cartorioRegistro;
		}
	}

	@Override
	public void setCartorioRegistro(String cartorioRegistro) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cartorioRegistro = cartorioRegistro;
	}

	@JSON
	@Override
	public String getRenavam() {
		if (_renavam == null) {
			return "";
		}
		else {
			return _renavam;
		}
	}

	@Override
	public void setRenavam(String renavam) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_renavam = renavam;
	}

	@JSON
	@Override
	public String getLocalizacao() {
		if (_localizacao == null) {
			return "";
		}
		else {
			return _localizacao;
		}
	}

	@Override
	public void setLocalizacao(String localizacao) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_localizacao = localizacao;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DadosRegistro.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DadosRegistro toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DadosRegistro>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DadosRegistroImpl dadosRegistroImpl = new DadosRegistroImpl();

		dadosRegistroImpl.setUuid(getUuid());
		dadosRegistroImpl.setDadosRegistroId(getDadosRegistroId());
		dadosRegistroImpl.setGarantiaId(getGarantiaId());
		dadosRegistroImpl.setMatriculaImovel(getMatriculaImovel());
		dadosRegistroImpl.setCartorioRegistro(getCartorioRegistro());
		dadosRegistroImpl.setRenavam(getRenavam());
		dadosRegistroImpl.setLocalizacao(getLocalizacao());

		dadosRegistroImpl.resetOriginalValues();

		return dadosRegistroImpl;
	}

	@Override
	public DadosRegistro cloneWithOriginalValues() {
		DadosRegistroImpl dadosRegistroImpl = new DadosRegistroImpl();

		dadosRegistroImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		dadosRegistroImpl.setDadosRegistroId(
			this.<Long>getColumnOriginalValue("dadosRegistroId"));
		dadosRegistroImpl.setGarantiaId(
			this.<Long>getColumnOriginalValue("garantiaId"));
		dadosRegistroImpl.setMatriculaImovel(
			this.<String>getColumnOriginalValue("matriculaImovel"));
		dadosRegistroImpl.setCartorioRegistro(
			this.<String>getColumnOriginalValue("cartorioRegistro"));
		dadosRegistroImpl.setRenavam(
			this.<String>getColumnOriginalValue("renavam"));
		dadosRegistroImpl.setLocalizacao(
			this.<String>getColumnOriginalValue("localizacao"));

		return dadosRegistroImpl;
	}

	@Override
	public int compareTo(DadosRegistro dadosRegistro) {
		long primaryKey = dadosRegistro.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DadosRegistro)) {
			return false;
		}

		DadosRegistro dadosRegistro = (DadosRegistro)object;

		long primaryKey = dadosRegistro.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DadosRegistro> toCacheModel() {
		DadosRegistroCacheModel dadosRegistroCacheModel =
			new DadosRegistroCacheModel();

		dadosRegistroCacheModel.uuid = getUuid();

		String uuid = dadosRegistroCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dadosRegistroCacheModel.uuid = null;
		}

		dadosRegistroCacheModel.dadosRegistroId = getDadosRegistroId();

		dadosRegistroCacheModel.garantiaId = getGarantiaId();

		dadosRegistroCacheModel.matriculaImovel = getMatriculaImovel();

		String matriculaImovel = dadosRegistroCacheModel.matriculaImovel;

		if ((matriculaImovel != null) && (matriculaImovel.length() == 0)) {
			dadosRegistroCacheModel.matriculaImovel = null;
		}

		dadosRegistroCacheModel.cartorioRegistro = getCartorioRegistro();

		String cartorioRegistro = dadosRegistroCacheModel.cartorioRegistro;

		if ((cartorioRegistro != null) && (cartorioRegistro.length() == 0)) {
			dadosRegistroCacheModel.cartorioRegistro = null;
		}

		dadosRegistroCacheModel.renavam = getRenavam();

		String renavam = dadosRegistroCacheModel.renavam;

		if ((renavam != null) && (renavam.length() == 0)) {
			dadosRegistroCacheModel.renavam = null;
		}

		dadosRegistroCacheModel.localizacao = getLocalizacao();

		String localizacao = dadosRegistroCacheModel.localizacao;

		if ((localizacao != null) && (localizacao.length() == 0)) {
			dadosRegistroCacheModel.localizacao = null;
		}

		return dadosRegistroCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DadosRegistro, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DadosRegistro, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DadosRegistro, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DadosRegistro)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DadosRegistro>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DadosRegistro.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _dadosRegistroId;
	private long _garantiaId;
	private String _matriculaImovel;
	private String _cartorioRegistro;
	private String _renavam;
	private String _localizacao;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DadosRegistro, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DadosRegistro)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("dadosRegistroId", _dadosRegistroId);
		_columnOriginalValues.put("garantiaId", _garantiaId);
		_columnOriginalValues.put("matriculaImovel", _matriculaImovel);
		_columnOriginalValues.put("cartorioRegistro", _cartorioRegistro);
		_columnOriginalValues.put("renavam", _renavam);
		_columnOriginalValues.put("localizacao", _localizacao);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("dadosRegistroId", 2L);

		columnBitmasks.put("garantiaId", 4L);

		columnBitmasks.put("matriculaImovel", 8L);

		columnBitmasks.put("cartorioRegistro", 16L);

		columnBitmasks.put("renavam", 32L);

		columnBitmasks.put("localizacao", 64L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DadosRegistro _escapedModel;

}